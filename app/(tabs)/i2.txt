import React, { useState } from 'react';
import { View, Button, Dimensions } from 'react-native';
import * as ImagePicker from 'expo-image-picker';
import { Canvas, Image as SkiaImage, useImage, Circle, Group } from '@shopify/react-native-skia';
import { PanGestureHandler } from 'react-native-gesture-handler';
import Animated, { useAnimatedGestureHandler, useSharedValue, useAnimatedProps } from 'react-native-reanimated';

const { width } = Dimensions.get('window');
const MAG_RADIUS = 60;

export default function MagnifierTool() {
  const [uri, setUri] = useState<string | null>(null);
  const image = useImage(uri || '');
  const x = useSharedValue(width / 2);
  const y = useSharedValue(200);

  const pickImage = async () => {
    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      quality: 1,
    });

    if (!result.canceled) {
      setUri(result.assets[0].uri);
    }
  };

  const gestureHandler = useAnimatedGestureHandler({
    onActive: (event) => {
      x.value = event.x;
      y.value = event.y;
    },
  });

  return (
    <View style={{ flex: 1 }}>
      <Button title="Pick Image" onPress={pickImage} />

      {image && (
        <PanGestureHandler onGestureEvent={gestureHandler}>
          <Animated.View style={{ flex: 1 }}>
            <Canvas style={{ flex: 1 }}>
              <SkiaImage image={image} x={0} y={0} width={width} height={width * (image.height / image.width)} />

              {/* Zoomed-in circular magnifier */}
              <Group clip={<Circle cx={x} cy={y} r={MAG_RADIUS} />}>
                <SkiaImage
                  image={image}
                  x={x.value - MAG_RADIUS * 2}
                  y={y.value - MAG_RADIUS * 2}
                  width={width * 2}
                  height={(width * (image.height / image.width)) * 2}
                />
              </Group>

              {/* Red ring for magnifier border */}
              <Circle cx={x} cy={y} r={MAG_RADIUS} color="red" style="stroke" strokeWidth={2} />
            </Canvas>
          </Animated.View>
        </PanGestureHandler>
      )}
    </View>
  );
}
